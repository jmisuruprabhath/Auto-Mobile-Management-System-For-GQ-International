{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/omitKeys.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/cloneObject.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  nameRef.current = name as InternalFieldName;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState,\n          ...formState,\n        }),\n    });\n\n    disabled && formStateSubscription.unsubscribe();\n\n    return () => formStateSubscription.unsubscribe();\n  }, [disabled, control]);\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    const controllerSubscription = control._subjects.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._isInAction\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options?: FieldArrayMethodProps,\n): string =>\n  options && !options.shouldFocus\n    ? options.focusName || `${name}.${options.focusIndex}.`\n    : `${name}.${index}.`;\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UpdateValues,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport omitKeys from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _formValues = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _isInAction = false;\n  let _isMounted = false;\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        const fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: getValues(),\n            name,\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) &&\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    }\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields as TFieldValues, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = inputType ? getFieldValue(field._f) : value;\n      const isBlurEvent = type === EVENTS.BLUR;\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      set(_formValues, name, inputValue);\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _isMounted && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isMounted,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(isMounted || _isMounted\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateValues: UpdateValues<TFieldValues> = (\n    defaultValues,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(_fields, fieldName);\n\n      if (!field || !field._f) {\n        if (\n          (isObject(value) && Object.keys(value).length) ||\n          (Array.isArray(value) && value.length)\n        ) {\n          _updateValues(value, fieldName);\n        } else if (!field) {\n          set(_formValues, fieldName, value);\n        }\n      }\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    updatedFieldArrayValuesWithKey = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    const updatedFieldArrayValues = omitKeys(\n      updatedFieldArrayValuesWithKey,\n      keyName,\n    );\n    _isInAction = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    output = method(get(_formValues, name), args.argA, args.argB);\n    shouldSet && set(_formValues, name, output);\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields as TFieldValues, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields as TFieldValues,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_isMounted ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_isMounted ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          false,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    (!options || !options.disabled) && _updateValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n\n    if (isBoolean(options.disabled) && field) {\n      set(\n        _formValues,\n        name,\n        options.disabled\n          ? undefined\n          : get(_formValues, name, getFieldValue(field._f)),\n      );\n    }\n\n    _names.mount.add(name);\n    !field && _updateValidAndInputValue(name, undefined, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isUndefined(options.disabled)\n            ? {}\n            : { disabled: options.disabled }),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _isMounted = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _updateValues,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _isMounted() {\n        return _isMounted;\n      },\n      set _isMounted(value) {\n        _isMounted = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _isInAction() {\n        return _isInAction;\n      },\n      set _isInAction(value) {\n        _isInAction = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fieldss: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fieldss, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArrayValue(name), keyName));\n  const _fieldIds = React.useRef(fields);\n\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValuesWithKey,\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValuesWithKey,\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValuesWithKey,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValuesWithKey,\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updatedFieldArrayValuesWithKey,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      keyName,\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updatedFieldArrayValuesWithKey,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      keyName,\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updatedFieldArrayValuesWithKey,\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const values = mapIds(convertToArrayPayload(value), keyName);\n    setFields(\n      values as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      () => values,\n      {},\n      values,\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._isInAction = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = control._subjects.array.subscribe({\n      next({ values, name: fieldArrayName }) {\n        if (fieldArrayName === name || !fieldArrayName) {\n          setFields(mapIds(get(values, name), keyName));\n        }\n      },\n    });\n\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (control._shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [name, control, keyName]),\n    move: React.useCallback(move, [name, control, keyName]),\n    prepend: React.useCallback(prepend, [name, control, keyName]),\n    append: React.useCallback(append, [name, control, keyName]),\n    remove: React.useCallback(remove, [name, control, keyName]),\n    insert: React.useCallback(insert, [name, control, keyName]),\n    update: React.useCallback(update, [name, control, keyName]),\n    replace: React.useCallback(replace, [name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._isMounted) {\n      control._isMounted = true;\n      control._proxyFormState.isValid && control._updateValid();\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    const watchSubscription = control._subjects.watch.subscribe({\n      next: ({ name }) => {\n        if (\n          !_name.current ||\n          !name ||\n          convertToArrayPayload(_name.current).some(\n            (fieldName) =>\n              name &&\n              fieldName &&\n              (fieldName.startsWith(name as InternalFieldName) ||\n                name.startsWith(fieldName as InternalFieldName)),\n          )\n        ) {\n          const result = control._getWatch(\n            _name.current as InternalFieldName,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            true,\n          );\n          updateValue(\n            isObject(result)\n              ? { ...result }\n              : Array.isArray(result)\n              ? [...result]\n              : result,\n          );\n        }\n      },\n    });\n\n    disabled && watchSubscription.unsubscribe();\n\n    return () => watchSubscription.unsubscribe();\n  }, [disabled, control, defaultValue]);\n\n  React.useEffect(() => {\n    control._removeFields();\n  });\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useFormState","props","methods","control","disabled","nameRef","useRef","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","_subjects","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","isNameInFieldArray","_names","array","_isInAction","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","_isMounted","_timer","Set","unMount","watch","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","criteriaMode","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","previousError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","_fieldss","getResolverOptions","validateForm","shouldCheckValid","valid","fieldError","validateField","handleChange","inputType","isBlurEvent","shouldSkipValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isMounted","isGlobal","_updateValues","schemaResult","executeResolverValidation","Promise","all","inputName","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","_removeFields","live","_updateFieldArray","method","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","_updateProps","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","updatedValues","cloneObject","getTime","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","render","Provider","children","setFields","mapIds","watchField","startsWith","fieldArraySubscription","fieldArrayName","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","_name","updateValue","watchSubscription"],"mappings":"okBAEgBA,GACG,aAAjBA,EAAQC,OCHMC,GAAkBA,aAAgBC,OCAlCC,GAAuD,MAATA,ECGvD,MAAMC,EAAgBD,GAAoC,iBAAVA,QAErBA,IAC/BE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,KCTAM,GAAiBA,EAAKC,UAAU,EAAGD,EAAKE,OAAO,SAAWF,ICI3D,CAACG,EAA+BH,IAC7C,IAAIG,GAAOC,KAAMC,GAAYC,EAAkBN,KAAUK,KCL3CX,GAAiBA,EAAMa,OAAOC,WCA9BC,QAA2CC,IAARD,ICKpC,CACbE,EACAC,EACAC,KAEA,GAAIC,EAASH,IAAQC,EAAM,CACzB,MAAMG,EAASC,EAAQJ,EAAKK,MAAM,cAAcC,OAC9C,CAACH,EAAQI,IAASvB,EAAkBmB,GAAUA,EAASA,EAAOI,GAC9DR,GAGF,OAAOS,EAAYL,IAAWA,IAAWJ,EACrCS,EAAYT,EAAIC,IACdC,EACAF,EAAIC,GACNG,IClBD,MAAMM,EACL,OADKA,EAEH,SAGGC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,iBCtBG,CACbC,EACAL,KAEA,MAAMM,mBAAYD,GAGlB,cAFOC,EAAKN,GAELM,GCFT,MAAMC,EAAcC,EAAMC,cAAoC,MAE9DF,EAAYG,YAAc,mBAEbC,EAAiB,IAG5BH,EAAMI,WAAWL,SCTJ,CACbM,EACAC,EACAC,EACAC,GAAS,KAET,SAASC,EAAaC,GACpB,MAAO,KACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUf,IAC5BW,EAAgBI,IAASF,GAAUb,GAErCY,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,IAMvB,MAAMtB,EAAS,GACf,IAAK,MAAMI,KAAOa,EAChBM,OAAOC,eAAexB,EAAQI,EAAK,CACjCqB,IAAKJ,EAAajB,KAItB,OAAOJ,KCzBOrB,GACdoB,EAASpB,KAAW4C,OAAOG,KAAK/C,GAAOgD,SCA1B,CACbC,EACAV,EACAE,KAEA,MAAMH,EAAYY,EAAKD,EAAe,QAEtC,OACEE,EAAcb,IACdM,OAAOG,KAAKT,GAAWU,QAAUJ,OAAOG,KAAKR,GAAiBS,QAC9DJ,OAAOG,KAAKT,GAAWc,KACpB3B,GACCc,EAAgBd,OACdgB,GAAUb,OClBe5B,GACjCG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,GCYlC,SAASqD,EACPC,GAEA,MAAMC,EAAUnB,KACVoB,QAAEA,EAAUD,EAAQC,QAAOC,SAAEA,EAAQnD,KAAEA,GAASgD,GAAS,GACzDI,EAAUzB,EAAM0B,OAA0BrD,IACzCgC,EAAWsB,GAAmB3B,EAAM4B,SAASL,EAAQM,YACtDC,EAAuB9B,EAAM0B,OAAO,CACxCK,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAsBV,OApBAX,EAAQ/C,QAAUL,EAElB2B,EAAMqC,UAAU,KACd,MAAMC,EAAwBf,EAAQgB,UAAUC,MAAMC,UAAU,CAC9DC,KAAOrC,KACHoB,EAAQ/C,UACP2B,EAAUhC,MACXsE,EAAsBlB,EAAQ/C,SAASkE,SAASvC,EAAUhC,QAC5DwE,EAAsBxC,EAAWyB,EAAqBpD,UACtDiD,iCACKJ,EAAQM,YACRxB,MAMT,OAFAmB,GAAYc,EAAsBQ,cAE3B,IAAMR,EAAsBQ,eAClC,CAACtB,EAAUD,IAEPwB,EACL1C,EACAkB,EAAQjB,gBACRwB,EAAqBpD,SACrB,YCnCYsE,EAId3B,GAEA,MAAMC,EAAUnB,KACV9B,KAAEA,EAAIkD,QAAEA,EAAUD,EAAQC,QAAO0B,iBAAEA,GAAqB5B,GACvDtD,EAAOmF,GAAsBlD,EAAM4B,SACxCf,EACEU,EAAQ4B,YACR9E,EACAwC,EAAIU,EAAQ6B,eAAgB/E,EAAMgD,EAAMnC,gBAGtCmB,EAAYe,EAAa,CAC7BG,QAASA,GAAWD,EAAQC,QAC5BlD,KAAAA,IAGIgF,EAAgB9B,EAAQ+B,SAASjF,iCAClCgD,EAAMkC,QACTxF,MAAAA,KAGIyF,EAAgBxD,EAAMyD,YAC1B,CAACpF,EAAyBN,KACxB,MAAM2F,EAAe7C,EAAIU,EAAQoC,QAAStF,GAEtCqF,IACFA,EAAME,GAAGC,MAAQ9F,IAGrB,CAACwD,IA4BH,OAzBAvB,EAAMqC,UAAU,KACd,MAAMyB,EAAyBvC,EAAQgB,UAAUhB,QAAQkB,UAAU,CACjEC,KAAO7E,KACHA,EAAKQ,MAAQA,IAASR,EAAKQ,OAC7B6E,EAAmBrC,EAAIhD,EAAKkG,OAAQ1F,MAIxC,OAFAmF,EAAcnF,GAAM,GAEb,KACLyF,EAAuBhB,cACvB,MAAMkB,EACJzC,EAAQ0C,mBAAqBhB,GAG7BiB,EAAmB3C,EAAQ4C,OAAOC,MAAO/F,GACrC2F,IAA2BzC,EAAQ8C,YACnCL,GAEJzC,EAAQ+C,WAAWjG,GAEnBmF,EAAcnF,GAAM,KAGvB,CAACA,EAAMkD,EAAS0B,EAAkBO,IAE9B,CACLE,MAAO,CACLa,SAAWC,IACT,MAAMzG,EC5EC,CAACyG,GACdrF,EAASqF,IAAWA,EAAgBC,OAChCC,EAAiBF,EAAgBC,QAC9BD,EAAgBC,OAAOE,QACvBH,EAAgBC,OAAO1G,MAC1ByG,EDuEgBI,CAAmBJ,GACjCtB,EAAmBnF,GAEnBsF,EAAckB,SAAS,CACrBE,OAAQ,CACN1G,MAAAA,EACAM,KAAMA,GAERT,KAAM8B,KAGVmF,OAAQ,KACNxB,EAAcwB,OAAO,CACnBJ,OAAQ,CACN1G,MAAAA,EACAM,KAAMA,GAERT,KAAM8B,KAGVrB,KAAAA,EACAN,MAAAA,EACA+G,IAAMC,IACJ,MAAMrB,EAAQ7C,EAAIU,EAAQoC,QAAStF,GAE/B0G,GAAOrB,GAASqB,EAAIC,QACtBtB,EAAME,GAAGkB,IAAM,CACbE,MAAO,IAAMD,EAAIC,QACjBC,kBAAoBC,GAClBH,EAAIE,kBAAkBC,GACxBC,eAAgB,IAAMJ,EAAII,qBAKlC9E,UAAAA,EACA+E,WAAY,CACVC,UAAWxE,EAAIR,EAAU+B,OAAQ/D,GACjC0D,UAAWlB,EAAIR,EAAU2B,YAAa3D,GACtCiH,YAAazE,EAAIR,EAAU4B,cAAe5D,GAC1CkH,MAAO1E,EAAIR,EAAU+B,OAAQ/D,WEnHpB,CACbA,EACAmH,EACApD,EACAxE,EACAsH,IAEAM,iCAESpD,EAAO/D,KACVoH,qCACMrD,EAAO/D,IAAS+D,EAAO/D,GAAOoH,MAAQrD,EAAO/D,GAAOoH,MAAQ,KAChEC,CAAC9H,GAAOsH,IAAW,MAGvB,KCrBUnH,GAAkB,QAAQ4H,KAAK5H,KCE/B6H,GACdvG,EAAQuG,EAAMC,QAAQ,YAAa,IAAIvG,MAAM,mBCGvBwG,EACtBC,EACA9G,EACAlB,GAEA,IAAIiI,GAAS,EACb,MAAMC,EAAWC,EAAMjH,GAAQ,CAACA,GAAQkH,EAAalH,GAC/C8B,EAASkF,EAASlF,OAClBqF,EAAYrF,EAAS,EAE3B,OAASiF,EAAQjF,GAAQ,CACvB,MAAMvB,EAAMyG,EAASD,GACrB,IAAIK,EAAWtI,EAEf,GAAIiI,IAAUI,EAAW,CACvB,MAAME,EAAWP,EAAOvG,GACxB6G,EACElH,EAASmH,IAAapI,MAAMC,QAAQmI,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGRD,EAAOvG,GAAO6G,EACdN,EAASA,EAAOvG,GAElB,OAAOuG,EC1BT,MAAMS,EAAe,CACnBC,EACAC,EACAC,KAEA,IAAK,MAAMnH,KAAOmH,GAAehG,OAAOG,KAAK2F,GAAS,CACpD,MAAM/C,EAAQ7C,EAAI4F,EAAQjH,GAE1B,GAAIkE,EAAO,CACT,MAAME,EAAKF,EAAME,GACXlF,EAAUuC,EAAKyC,EAAO,MAE5B,GAAIE,GAAM8C,EAAS9C,EAAGvF,MAAO,CAC3B,GAAIuF,EAAGkB,IAAIE,OAASvF,EAAYmE,EAAGkB,IAAIE,SACrC,MACK,GAAIpB,EAAGgD,KAAM,CAClBhD,EAAGgD,KAAK,GAAG5B,QACX,YAEO7F,EAAST,IAClB8H,EAAa9H,EAASgI,YCxBf,CACbrI,EACA2H,EACAa,IAEAA,IAAYA,EAAQC,YAChBD,EAAQE,WAAa,GAAG1I,KAAQwI,EAAQG,cACxC,GAAG3I,KAAQ2H,OCLF,CACbjC,EACAkD,EACAC,IAEAnD,EAAOoD,IAAI,CAACpJ,EAAOiI,KACjB,MAAMoB,EAASH,EAAUvI,QAAQsH,GAEjC,sCACKjI,GACCqJ,EAAS,CAAE1B,CAACwB,GAAWE,EAAuBF,IAAa,QCdtD,KACb,MAAMG,EACmB,oBAAhBC,YAA8BxJ,KAAKyJ,MAA4B,IAApBD,YAAYC,MAEhE,MAAO,uCAAuC1B,QAAQ,QAAU2B,IAC9D,MAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,SCHtC,CAKb7D,EAAuC,GACvCmD,IAEAnD,EAAOoD,IAAKpJ,kCACNA,EAAMmJ,GAAW,GAAK,CAAExB,CAACwB,GAAUW,MACpC9J,aCZiB+J,EAAUjK,EAAWE,GAC3C,MAAO,IAAI4E,EAAsB9E,MAAU8E,EAAsB5E,UCHhDA,GACjBG,MAAMC,QAAQJ,GAASA,EAAMoJ,IAAI,aAAmBpI,WCO9BgJ,EACtBlK,EACAmI,EACAjI,GAEA,MAAO,IACFF,EAAKmK,MAAM,EAAGhC,MACdrD,EAAsB5E,MACtBF,EAAKmK,MAAMhC,UCdH,CACbnI,EACAoK,EACAC,IAEIhK,MAAMC,QAAQN,IACZ4B,EAAY5B,EAAKqK,MACnBrK,EAAKqK,QAAMnJ,GAEblB,EAAKsK,OAAOD,EAAI,EAAGrK,EAAKsK,OAAOF,EAAM,GAAG,IACjCpK,GAGF,YCbeuK,EAAWvK,EAAWE,GAC5C,MAAO,IAAI4E,EAAsB5E,MAAW4E,EAAsB9E,UCarD,CAAIA,EAAWmI,IAC5BvG,EAAYuG,GACR,GAdN,SAA4BnI,EAAWwK,GACrC,IAAIC,EAAI,EACR,MAAMC,EAAO,IAAI1K,GAEjB,IAAK,MAAMmI,KAASqC,EAClBE,EAAKJ,OAAOnC,EAAQsC,EAAG,GACvBA,IAGF,OAAOjJ,EAAQkJ,GAAMxH,OAASwH,EAAO,GAMjCC,CACE3K,EACC8E,EAAsBqD,GAAoByC,KAAK,CAACC,EAAGC,IAAMD,EAAIC,MCrBvD,CAAI9K,EAAW+K,EAAgBC,KAC5ChL,EAAK+K,GAAU,CAAC/K,EAAKgL,GAAUhL,EAAKgL,GAAUhL,EAAK+K,IAAU,MCDhD,CAAIE,EAAkB9C,EAAejI,KAClD+K,EAAY9C,GAASjI,EACd+K,UCGO/K,GACdE,EAAkBF,KAAWC,EAAaD,YCDpBgL,GAAUC,EAAcC,GAC9C,GACEC,GAAYF,IACZE,GAAYD,IACZ7K,EAAa4K,IACb5K,EAAa6K,GAEb,OAAOD,IAAYC,EAGrB,MAAME,EAAQxI,OAAOG,KAAKkI,GACpBI,EAAQzI,OAAOG,KAAKmI,GAE1B,GAAIE,EAAMpI,SAAWqI,EAAMrI,OACzB,OAAO,EAGT,IAAK,MAAMvB,KAAO2J,EAAO,CACvB,MAAME,EAAOL,EAAQxJ,GAErB,IAAK4J,EAAMxG,SAASpD,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,MAAM8J,EAAOL,EAAQzJ,GAErB,IACGL,EAASkK,IAASnL,MAAMC,QAAQkL,MAChClK,EAASmK,IAASpL,MAAMC,QAAQmL,KAC5BP,GAAUM,EAAMC,GACjBD,IAASC,EAEb,OAAO,GAKb,OAAO,SCvCPC,KAQAC,YAAaD,GAAQA,IAAS5J,EAC9B8J,SAAUF,IAAS5J,EACnB+J,WAAYH,IAAS5J,EACrBgK,QAASJ,IAAS5J,EAClBiK,UAAWL,IAAS5J,OChBN5B,GAAsD,kBAAVA,KCE5CJ,GACG,SAAjBA,EAAQC,QCHMG,GACG,mBAAVA,KCDOA,GACdA,aAAiB8L,eCCHlM,GACG,oBAAjBA,EAAQC,QCDMD,GACG,UAAjBA,EAAQC,QCHMG,GAAqD,iBAAVA,KCA1B,oBAAX+L,aACU,IAAvBA,OAAOD,aACM,oBAAbE,YCEOjF,IAAckF,GAAclF,KAASiF,SAASE,SAASnF,MCAxD,CACb2B,EACAS,IACGT,EAAOU,IAAI,CAACzD,EAAQ,KAAOzC,EAAKyC,EAAOwD,UCM/BgD,GAAbxE,cACUyE,eAAwB,GAEhCzE,IAAI0E,GACFD,KAAKE,UAAUC,KAAKF,GAGtB1E,cACE,IAAK,MAAM6E,KAAYJ,KAAKE,UAC1BE,IAEFJ,KAAKE,UAAY,IAIrB,MAAMG,GAGJ9E,YAAoB+E,EAAuBC,GAAvBP,cAAAM,EAFpBN,aAAS,EAGPO,EAAaC,IAAI,IAAOR,KAAKS,QAAS,GAGxClF,KAAK3H,GACEoM,KAAKS,QACRT,KAAKM,SAAS/H,KAAK3E,UAKJ8M,GAGnBnF,cACEyE,KAAKW,UAAY,GAGnBpF,KAAK3H,GACH,IAAK,MAAM0M,KAAYN,KAAKW,UAC1BL,EAAS/H,KAAK3E,GAIlB2H,UAAU+E,GACR,MAAMC,EAAe,IAAIR,GACnBa,EAAa,IAAIP,GAAWC,EAAUC,GAG5C,OAFAP,KAAKW,UAAUR,KAAKS,GAEbL,EAGThF,cACEyE,KAAKW,UAAY,aC9CGE,GAAMjF,EAAa9G,GACzC,MAAMgM,EAAa/E,EAAMjH,GAAQ,CAACA,GAAQkH,EAAalH,GACjDiM,EACiB,GAArBD,EAAWlK,OAAcgF,EAd7B,SAAiBA,EAAakF,GAC5B,MAAMlK,EAASkK,EAAWjD,MAAM,GAAI,GAAGjH,OACvC,IAAIiF,EAAQ,EAEZ,KAAOA,EAAQjF,GACbgF,EAAStG,EAAYsG,GAAUC,IAAUD,EAAOkF,EAAWjF,MAG7D,OAAOD,EAM6BoF,CAAQpF,EAAQkF,GAC9CzL,EAAMyL,EAAWA,EAAWlK,OAAS,GAC3C,IAAIqK,EAEAF,UACKA,EAAY1L,GAGrB,IAAK,IAAI6L,EAAI,EAAGA,EAAIJ,EAAWjD,MAAM,GAAI,GAAGjH,OAAQsK,IAAK,CACvD,IACIC,EADAtF,GAAS,EAEb,MAAMuF,EAAeN,EAAWjD,MAAM,IAAKqD,EAAI,IACzCG,EAAqBD,EAAaxK,OAAS,EAMjD,IAJIsK,EAAI,IACND,EAAiBrF,KAGVC,EAAQuF,EAAaxK,QAAQ,CACpC,MAAM0K,EAAOF,EAAavF,GAC1BsF,EAAYA,EAAYA,EAAUG,GAAQ1F,EAAO0F,GAG/CD,IAAuBxF,IACrB7G,EAASmM,IAAcpK,EAAcoK,IACpCpN,MAAMC,QAAQmN,KACZA,EAAU1M,OACRf,GACEsB,EAAStB,KAAUqD,EAAcrD,IAAU6N,GAAU7N,IACxDkD,UAENqK,SAAwBA,EAAeK,UAAe1F,EAAO0F,IAG/DL,EAAiBE,GAIrB,OAAOvF,ECpDT,MAAM4F,GAAqC,CACzC5N,OAAO,EACPoE,SAAS,GAGLyJ,GAAc,CAAE7N,OAAO,EAAMoE,SAAS,UAE5B0E,IACd,GAAI3I,MAAMC,QAAQ0I,GAAU,CAC1B,GAAIA,EAAQ9F,OAAS,EAAG,CACtB,MAAMgD,EAAS8C,EACZjI,OAAQiN,GAAWA,GAAUA,EAAOlH,UAAYkH,EAAOrK,UACvD2F,IAAK0E,GAAWA,EAAO9N,OAC1B,MAAO,CAAEA,MAAOgG,EAAQ5B,UAAW4B,EAAOhD,QAG5C,OAAO8F,EAAQ,GAAGlC,UAAYkC,EAAQ,GAAGrF,SAErCqF,EAAQ,GAAGiF,aAAerM,EAAYoH,EAAQ,GAAGiF,WAAW/N,OAC1D0B,EAAYoH,EAAQ,GAAG9I,QAA+B,KAArB8I,EAAQ,GAAG9I,MAC1C6N,GACA,CAAE7N,MAAO8I,EAAQ,GAAG9I,MAAOoE,SAAS,GACtCyJ,GACFD,GAGN,OAAOA,OC9BM,CACb5N,GACEgO,cAAAA,EAAeC,YAAAA,EAAaC,WAAAA,KAE9BxM,EAAY1B,GACRA,EACAgO,EACU,KAAVhO,EACEmO,KACCnO,EACHiO,EACA,IAAIlO,KAAKC,GACTkO,EACAA,EAAWlO,GACXA,ECZN,MAAMoO,GAAkC,CACtChK,SAAS,EACTpE,MAAO,aAGO8I,GACd3I,MAAMC,QAAQ0I,GACVA,EAAQtH,OACN,CAAC6M,EAAUP,IACTA,GAAUA,EAAOlH,UAAYkH,EAAOrK,SAChC,CACEW,SAAS,EACTpE,MAAO8N,EAAO9N,OAEhBqO,EACND,IAEFA,YCVkBE,GAAczI,GACpC,MAAMkB,EAAMlB,EAAGkB,ICbF,IACb+B,EDcA,KAAIjD,EAAGgD,KAAOhD,EAAGgD,KAAK0F,MAAOxH,GAAQA,EAAItD,UAAYsD,EAAItD,UAIzD,OAAI+K,GAAYzH,GACPA,EAAI0H,MAGTC,GAAa3H,GACR4H,GAAc9I,EAAGgD,MAAM7I,MAG5B4O,GAAiB7H,IC1BrB+B,ED2BgC/B,EAAI+B,QCzBpC,IAAIA,GACDjI,OAAO,EAAGgO,SAAAA,KAAwBA,GAClCzF,IAAI,EAAGpJ,MAAAA,KAAoBA,ID0B1B8O,EAAW/H,GACNgI,GAAiBlJ,EAAGgD,MAAM7I,MAG5BgP,GAAgBtN,EAAYqF,EAAI/G,OAAS6F,EAAGkB,IAAI/G,MAAQ+G,EAAI/G,MAAO6F,GE7B5E,SAASoJ,GAKPjJ,EACAkJ,EACAjL,EACAkL,EACAC,GAEA,IAAInH,GAAS,EAEb,OAASA,EAAQjC,EAAOhD,QAAQ,CAC9B,IAAK,MAAMvB,KAAOuE,EAAOiC,GACnB9H,MAAMC,QAAQ4F,EAAOiC,GAAOxG,MAC7BwC,EAAYgE,KAAWhE,EAAYgE,GAAS,IAC7ChE,EAAYgE,GAAOxG,GAAO,GAC1BwN,GACEjJ,EAAOiC,GAAOxG,GACdqB,EAAIoM,EAAcjH,IAAU,GAAIxG,EAAK,IACrCwC,EAAYgE,GAAOxG,GACnBwC,EAAYgE,GACZxG,KAGDvB,EAAkBgP,IACnBlE,GAAUlI,EAAIoM,EAAcjH,IAAU,GAAIxG,GAAMuE,EAAOiC,GAAOxG,IAC1DsG,EAAI9D,EAAYgE,IAAU,GAAIxG,GAC7BwC,EAAYgE,kCACRhE,EAAYgE,KACfN,CAAClG,IAAM,IAKjB0N,IACGlL,EAAYjB,eACNmM,EAAWC,GAGtB,OAAOnL,SAGM,CACb+B,EACAkJ,EACAjL,aClDcoL,EAGd3I,EAAW5E,GACX,GAAIqJ,GAAYzE,IAAWyE,GAAYrJ,GACrC,OAAOA,EAGT,IAAK,MAAML,KAAOK,EAAQ,CACxB,MAAMwN,EAAc5I,EAAOjF,GACrB8N,EAAczN,EAAOL,GAE3B,IACEiF,EAAOjF,GACJL,EAASkO,IAAgBlO,EAASmO,IAClCpP,MAAMC,QAAQkP,IAAgBnP,MAAMC,QAAQmP,GACzCF,EAAUC,EAAaC,GACvBA,EACN,WAGJ,OAAO7I,ED+BP2I,CACEJ,GAAejJ,EAAQkJ,EAAejL,EAAYgG,MAAM,EAAGjE,EAAOhD,SAClEiM,GAAeC,EAAelJ,EAAQ/B,EAAYgG,MAAM,EAAGjE,EAAOhD,aErDvD,CAAI+D,EAAQzG,KACxBgB,EAAQwB,EAAIiE,EAAKzG,EAAM,KAAK0C,QAAUiK,GAAMlG,EAAKzG,MCApCN,GACdwP,GAASxP,IAAUiC,EAAMwN,eAAezP,MCN1BA,GAAoCA,aAAiB0P,gBCI7CC,GACtBtO,EACA0F,EACAlH,EAAO,YAEP,GACE+P,GAAUvO,IACTlB,MAAMC,QAAQiB,IAAWA,EAAOkN,MAAMqB,KACtCjC,GAAUtM,KAAYA,EAEvB,MAAO,CACLxB,KAAAA,EACAsH,QAASyI,GAAUvO,GAAUA,EAAS,GACtC0F,IAAAA,UCbU8I,GACdzO,EAASyO,KAAoBC,GAAQD,GACjCA,EACA,CACE7P,MAAO6P,EACP1I,QAAS,OCWF4I,MACbpK,EACAqK,EACAvI,EACAwI,KAEA,MAAMlJ,IACJA,EAAG8B,KACHA,EAAIqH,SACJA,EAAQC,UACRA,EAASC,UACTA,EAASC,IACTA,EAAGC,IACHA,EAAGC,QACHA,EAAOC,SACPA,EAAQlQ,KACRA,EAAI0N,cACJA,EAAalI,MACbA,EAAKrC,SACLA,GACEkC,EAAME,GACV,IAAKC,GAASrC,EACZ,MAAO,GAET,MAAMgN,EAA6B5H,EAAOA,EAAK,GAAM9B,EAC/C2J,EAAoBvJ,IACpB8I,GAA6BQ,EAASrJ,iBACxCqJ,EAASvJ,kBAAkByG,GAAUxG,GAAW,GAAKA,GAAW,KAChEsJ,EAASrJ,mBAGPI,EAA6B,GAC7BmJ,EAAUjC,GAAa3H,GACvB+H,EAAanI,EAAgBI,GAC7B6J,EAAoBD,GAAW7B,EAC/B+B,GACF7C,GAAiBQ,GAAYzH,MAAUA,EAAI/G,OAC9B,KAAfgQ,GACC7P,MAAMC,QAAQ4P,KAAgBA,EAAWhN,OACtC8N,EAAoBC,EAAaC,KACrC,KACA1Q,EACAmH,EACAD,GAEIyJ,EAAmB,CACvBC,EACAC,EACAC,EACAC,EAAUxP,EACVyP,EAAUzP,KAEV,MAAMsF,EAAU+J,EAAYC,EAAmBC,EAC/C5J,EAAMlH,kBACJT,KAAMqR,EAAYG,EAAUC,EAC5BnK,QAAAA,EACAJ,IAAAA,GACG+J,EAAkBI,EAAYG,EAAUC,EAASnK,KAIxD,GACE+I,KACGU,IAAsBC,GAAW3Q,EAAkB8P,KACnDrC,GAAUqC,KAAgBA,GAC1BlB,IAAeC,GAAiBlG,GAAMzE,SACtCuM,IAAYhC,GAAc9F,GAAMzE,SACnC,CACA,MAAMpE,MAAEA,EAAKmH,QAAEA,GAAYyI,GAAUM,GACjC,CAAElQ,QAASkQ,EAAU/I,QAAS+I,GAC9BqB,GAAmBrB,GAEvB,GAAIlQ,IACFwH,EAAMlH,kBACJT,KAAMgC,EACNsF,QAAAA,EACAJ,IAAK0J,GACFK,EAAkBjP,EAAiCsF,KAEnDM,GAEH,OADAiJ,EAAiBvJ,GACVK,EAKb,KAAKqJ,GAAa3Q,EAAkBmQ,IAASnQ,EAAkBoQ,IAAO,CACpE,IAAIY,EACAM,EACJ,MAAMC,EAAYF,GAAmBjB,GAC/BoB,EAAYH,GAAmBlB,GAErC,GAAK7H,MAAMwH,GASJ,CACL,MAAM2B,EACH5K,EAAyBkH,aAAe,IAAIlO,KAAKiQ,GAChDR,GAASiC,EAAUzR,SACrBkR,EAAYS,EAAY,IAAI5R,KAAK0R,EAAUzR,QAEzCwP,GAASkC,EAAU1R,SACrBwR,EAAYG,EAAY,IAAI5R,KAAK2R,EAAU1R,YAhBvB,CACtB,MAAM4R,EACH7K,EAAyBiH,eAAiB6D,WAAW7B,GACnD9P,EAAkBuR,EAAUzR,SAC/BkR,EAAYU,EAAcH,EAAUzR,OAEjCE,EAAkBwR,EAAU1R,SAC/BwR,EAAYI,EAAcF,EAAU1R,OAaxC,IAAIkR,GAAaM,KACfP,IACIC,EACFO,EAAUtK,QACVuK,EAAUvK,QACVtF,EACAA,IAEG4F,GAEH,OADAiJ,EAAiBlJ,EAAMlH,GAAO6G,SACvBK,EAKb,IAAK2I,GAAaC,KAAeS,GAAWrB,GAASQ,GAAa,CAChE,MAAM8B,EAAkBP,GAAmBpB,GACrC4B,EAAkBR,GAAmBnB,GACrCc,GACHhR,EAAkB4R,EAAgB9R,QACnCgQ,EAAWhN,OAAS8O,EAAgB9R,MAChCwR,GACHtR,EAAkB6R,EAAgB/R,QACnCgQ,EAAWhN,OAAS+O,EAAgB/R,MAEtC,IAAIkR,GAAaM,KACfP,EACEC,EACAY,EAAgB3K,QAChB4K,EAAgB5K,UAEbM,GAEH,OADAiJ,EAAiBlJ,EAAMlH,GAAO6G,SACvBK,EAKb,GAAI+I,IAAYM,GAAWrB,GAASQ,GAAa,CAC/C,MAAQhQ,MAAOgS,EAAY7K,QAAEA,GAAYoK,GAAmBhB,GAE5D,GAAIT,GAAQkC,KAAkBhC,EAAWiC,MAAMD,KAC7CxK,EAAMlH,kBACJT,KAAMgC,EACNsF,QAAAA,EACAJ,IAAAA,GACG+J,EAAkBjP,EAAgCsF,KAElDM,GAEH,OADAiJ,EAAiBvJ,GACVK,EAKb,GAAIgJ,EACF,GAAI0B,GAAW1B,GAAW,CACxB,MACM2B,EAAgBxC,SADDa,EAASR,GACiBS,GAE/C,GAAI0B,IACF3K,EAAMlH,kCACD6R,GACArB,EACDjP,EACAsQ,EAAchL,WAGbM,GAEH,OADAiJ,EAAiByB,EAAchL,SACxBK,OAGN,GAAIpG,EAASoP,GAAW,CAC7B,IAAI4B,EAAmB,GAEvB,IAAK,MAAM3Q,KAAO+O,EAAU,CAC1B,IAAKrN,EAAciP,KAAsB3K,EACvC,MAGF,MAAM0K,EAAgBxC,SACda,EAAS/O,GAAKuO,GACpBS,EACAhP,GAGE0Q,IACFC,iCACKD,GACArB,EAAkBrP,EAAK0Q,EAAchL,UAG1CuJ,EAAiByB,EAAchL,SAE3BM,IACFD,EAAMlH,GAAQ8R,IAKpB,IAAKjP,EAAciP,KACjB5K,EAAMlH,kBACJyG,IAAK0J,GACF2B,IAEA3K,GACH,OAAOD,EAOf,OADAkJ,GAAiB,GACVlJ,GCjKT,MAAM6K,GAAiB,CACrB7G,KAAM5J,EACN0Q,eAAgB1Q,EAChB2Q,kBAAkB,GAGdC,GAAsC,oBAAXzG,gBAEjB0G,GAIdnP,EAA8C,IAE9C,IAIIoP,EAJAC,iCACCN,IACA/O,GAGDQ,EAAsC,CACxCE,SAAS,EACTG,cAAc,EACdF,YAAa,GACb2O,aAAa,EACbC,YAAa,EACb3O,cAAe,GACf4O,cAAc,EACdC,oBAAoB,EACpB3O,SAAS,EACTC,OAAQ,IAENuB,EAAU,GACVR,EAAc,GACdC,EAAiBsN,EAAYzD,eAAiB,GAC9C5I,GAAc,EACd0M,GAAa,EACbC,EAAS,EACT7M,EAAgB,CAClBN,MAAO,IAAIoN,IACXC,QAAS,IAAID,IACb7M,MAAO,IAAI6M,IACXE,MAAO,IAAIF,KAETG,EAAoD,GACxD,MAAM9Q,EAAkB,CACtByB,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,GAEJG,EAAoC,CACxC4O,MAAO,IAAItG,GACXtJ,QAAS,IAAIsJ,GACbzG,MAAO,IAAIyG,GACXrI,MAAO,IAAIqI,IAGPwG,EAAiBC,GAAmBZ,EAAYnH,MAChD8G,EAAiBiB,GAAmBZ,EAAYL,gBAChDkB,EACJb,EAAYc,eAAiB7R,EASzB8R,EAAkBpT,GACtB8F,EAAOuN,UACPvN,EAAOgN,MAAMQ,IAAItT,IACjB8F,EAAOgN,MAAMQ,KAAKtT,EAAK2R,MAAM,QAAU,IAAI,IAEvC4B,EAAmB,CAACvT,EAAyBkH,KACjDO,EAAIjE,EAAWO,OAAQ/D,EAAMkH,GAE7BhD,EAAUC,MAAME,KAAK,CACnBN,OAAQP,EAAWO,UAIjByP,EAA0B/D,MAC9BgE,EACAzT,EACA8D,EACAoD,EACAH,KAMA,MAAM2M,EAAgBlR,EAAIgB,EAAWO,OAAQ/D,GACvC2T,EACJ1R,EAAgB6B,SAAWN,EAAWM,UAAYA,EAhCpD,IAAqBuE,EAAauL,EA8ClC,GAZI5Q,EAAM6Q,YAAc3M,GACtBkL,EACEA,IApCiB/J,EAoCUkL,EApCGK,EAoCe5Q,EAAM6Q,WAnCvD,IAAIC,KACFC,aAAapB,GACbA,EAASlH,OAAOuI,WAAW,IAAM3L,KAAYyL,GAAOF,KAmCpDxB,EAAepS,EAAMkH,KAErB6M,aAAapB,GACbzL,EACIO,EAAIjE,EAAWO,OAAQ/D,EAAMkH,GAC7ByF,GAAMnJ,EAAWO,OAAQ/D,MAI3BkH,GAASwD,GAAUgJ,EAAexM,GAASwM,KAC1C7Q,EAAckE,IACf4M,KACDF,EACD,CACA,MAAMQ,+CACDlN,GACC4M,EAAoB,CAAE7P,QAAAA,GAAY,KACtCC,OAAQP,EAAWO,OACnB/D,KAAAA,IAGFwD,iCACKA,GACAyQ,GAGL/P,EAAUC,MAAME,KAAK4P,GAGvBlB,EAAe/S,KAEXiC,EAAgB4B,eAAiBkP,EAAe/S,KAClDkE,EAAUC,MAAME,KAAK,CACnBR,cAAc,IAEhBkP,EAAiB,KAIfmB,EAAgB,CACpBlU,EACAN,EACA8I,EAA0B,GAC1B2L,KAEA,MAAM9O,EAAe7C,EAAI8C,EAAStF,GAElC,GAAIqF,EAAO,CACT,MAAME,EAAKF,EAAME,GAEjB,GAAIA,EAAI,CACNkC,EAAI3C,EAAa9E,EAAM0O,GAAgBhP,EAAO6F,IAE9C,MAAM6O,EACJC,IAAS1I,GAAcpG,EAAGkB,MAAQ7G,EAAkBF,GAChD,GACAA,EAEFwO,GAAY3I,EAAGkB,OAASyI,GAASkF,GACnC7O,EAAGkB,IAAI0H,MAAQiG,EACN9F,GAAiB/I,EAAGkB,KAC7B,IAAIlB,EAAGkB,IAAI+B,SAAS8L,QACjBC,GACEA,EAAUhG,SACT6F,EACA7P,SAASgQ,EAAU7U,QAEhB6F,EAAGgD,KACRlC,EAAgBd,EAAGkB,KACrBlB,EAAGgD,KAAK7F,OAAS,EACb6C,EAAGgD,KAAK+L,QACLE,GACEA,EAAYlO,QAAUzG,MAAMC,QAAQsU,KAC9BA,EAAkBtR,KAClBtD,GAAiBA,IAASgV,EAAY9U,OAEzC0U,IAAeI,EAAY9U,OAElC6F,EAAGgD,KAAK,GAAGjC,UAAY8N,EAE5B7O,EAAGgD,KAAK+L,QACLG,GACEA,EAASnO,QAAUmO,EAAS/U,QAAU0U,GAI7C7O,EAAGkB,IAAI/G,MAAQ0U,EAGbD,GACFjQ,EAAUhB,QAAQmB,KAAK,CACrBqB,OAAQgP,IACR1U,KAAAA,KAIHwI,EAAQmM,aAAenM,EAAQoM,cAC9BC,EAAyB7U,EAAMoU,EAAY5L,EAAQoM,aACrDpM,EAAQsM,gBAAkBC,EAAQ/U,MAKlC6U,EAA2B,CAC/B7U,EACA0P,EACAsF,EACAb,GAAe,KAIf,MAAMhQ,EAA6D,CACjEnE,KAAAA,GAEF,IAAIiV,GAAY,EAEhB,GAAIhT,EAAgByB,QAAS,CAC3B,MAAMwR,EAAkB1R,EAAWE,QACnCF,EAAWE,QAAUyR,IACrBhR,EAAMT,QAAUF,EAAWE,QAC3BuR,EAAYC,IAAoB/Q,EAAMT,QAGxC,GAAIzB,EAAgB0B,cAAgBqR,EAAkB,CACpD,MAAMI,EAAuB5S,EAAIgB,EAAWG,YAAa3D,IAC5B0K,GAC3BlI,EAAIuC,EAAgB/E,GACpB0P,GAGEjI,EAAIjE,EAAWG,YAA6B3D,GAAM,GAClD2M,GAAMnJ,EAAWG,YAAa3D,GAClCmE,EAAMR,YAAcH,EAAWG,YAC/BsR,EACEA,GAAaG,IAAyB5S,EAAIgB,EAAWG,YAAa3D,GAGtE,MAAMqV,EAAyB7S,EAAIgB,EAAWI,cAAe5D,GAa7D,OAXIgV,IAAqBK,IACvB5N,EAAIjE,EAAWI,cAA+B5D,EAAMgV,GACpD7Q,EAAMP,cAAgBJ,EAAWI,cACjCqR,EACEA,GACChT,EAAgB2B,eACfyR,IAA2BL,GAGjCC,GAAad,GAAgBjQ,EAAUC,MAAME,KAAKF,GAE3C8Q,EAAY9Q,EAAQ,IAGvBmR,EAAkB7F,MAAOzP,GACtBqS,EAAYkD,eACTlD,EAAYkD,SAChBjT,iBAAKwC,GACLuN,EAAYmD,QC/UP,EACblN,EACAmN,EACAtC,EACAxD,KAEA,MAAMvH,EAAiD,GAEvD,IAAK,MAAMpI,KAAQsI,EAAa,CAC9B,MAAMjD,EAAQ7C,EAAIiT,EAAUzV,GAE5BqF,GAASoC,EAAIW,EAAQpI,EAAMqF,EAAME,IAGnC,MAAO,CACL4N,aAAAA,EACAhT,MAAO,IAAImI,GACXF,OAAAA,EACAuH,0BAAAA,ID8TM+F,CACE1V,GAAQ8F,EAAON,MACfF,EACA+M,EAAYc,aACZd,EAAY1C,4BAGf,GAoBDgG,EAAelG,MACnBnK,EACAsQ,EACAJ,EAAU,CACRK,OAAO,MAGT,IAAK,MAAM7V,KAAQsF,EAAS,CAC1B,MAAMD,EAAQC,EAAQtF,GAEtB,GAAIqF,EAAO,CACT,MAAME,EAAKF,EAAME,GACX6O,EAAaxR,EAAKyC,EAAO,MAE/B,GAAIE,EAAI,CACN,MAAMuQ,QAAmBC,GACvB1Q,EACA7C,EAAIsC,EAAaS,EAAGvF,MACpBkT,EACAb,EAAY1C,2BAGd,GAAImG,EAAWvQ,EAAGvF,QAChBwV,EAAQK,OAAQ,EAEZD,GACF,MAICA,IACHE,EAAWvQ,EAAGvF,MACVyH,EAAIjE,EAAWO,OAAQwB,EAAGvF,KAAM8V,EAAWvQ,EAAGvF,OAC9C2M,GAAMnJ,EAAWO,OAAQwB,EAAGvF,OAIpCoU,SACSuB,EAAavB,EAAYwB,EAAkBJ,IAIxD,OAAOA,EAAQK,OAGXG,EAA8BvG,OAClClQ,KAAAA,EACA6G,OAAAA,EACAA,QAAU1G,MAAAA,EAAOM,KAAAA,EAAMT,KAAM0W,OAE7B,MAAM5Q,EAAQ7C,EAAI8C,EAAStF,GAE3B,GAAIqF,EAAO,CACT,IAAI6B,EACApD,EACJ,MAAM4L,EAAauG,EAAYjI,GAAc3I,EAAME,IAAM7F,EACnDwW,EAAc3W,IAAS8B,EAEvB8U,KE7aI3N,EF8aQnD,EAAME,IE7apBC,QACPgD,EAAQoH,UACPpH,EAAQuH,KACRvH,EAAQwH,KACRxH,EAAQqH,WACRrH,EAAQsH,WACRtH,EAAQyH,SACRzH,EAAQ0H,WFuaDmC,EAAYkD,UACZ/S,EAAIgB,EAAWO,OAAQ/D,IACvBqF,EAAME,GAAG6Q,OGnbL,EACbF,EACAjP,EACAqL,EACAN,EAIA9G,KAQIA,EAAKI,WAEGgH,GAAepH,EAAKK,YACrBtE,GAAaiP,IACb5D,EAAcN,EAAe5G,SAAWF,EAAKE,WAC9C8K,IACC5D,EAAcN,EAAe3G,WAAaH,EAAKG,aACjD6K,GH6ZHG,CACEH,EACA1T,EAAIgB,EAAWI,cAAe5D,GAC9BwD,EAAW8O,YACXN,EACAgB,GAEEsD,GAAaJ,GAAe9C,EAAepT,GAEjDyH,EAAI3C,EAAa9E,EAAM0P,GAEvB,MAAM3I,EAAa8N,EACjB7U,EACA0P,EACAwG,GACA,GAGI/B,GAAgBtR,EAAckE,IAAeuP,EAQnD,IANCJ,GACChS,EAAU4O,MAAMzO,KAAK,CACnBrE,KAAAA,EACAT,KAAAA,IAGA4W,EACF,OACEhC,GACAjQ,EAAUC,MAAME,oBAAOrE,KAAAA,GAAUsW,EAAY,GAAKvP,IAatD,IATCmP,GAAeI,GAAapS,EAAUC,MAAME,KAAK,IAElD0O,EAAe/S,IAAQ+S,EAAe/S,GAAQ,GAE9CiC,EAAgB4B,cACdK,EAAUC,MAAME,KAAK,CACnBR,cAAc,IAGdwO,EAAYkD,SAAU,CACxB,MAAMxR,OAAEA,SAAiBuR,EAAgB,CAACtV,IAG1C,GAFAkH,EAAQ1E,EAAIuB,EAAQ/D,GAEhBqG,EAAgBD,KAAYc,EAAO,CACrC,MAAMqP,EAAiBjW,EAAkBN,GACnCwW,EAAchU,EAAI8C,EAASiR,GAEjC,GACE1W,MAAMC,QAAQ0W,IACdA,EAAYvI,MACT5I,GAAiBA,EAAME,IAAMc,EAAgBhB,EAAME,GAAGkB,MAEzD,CACA,MAAMgQ,EAAcjU,EAAIuB,EAAQwS,EAAgB,IAChDE,EAAYlX,OAAS2H,EAAQuP,GAC7BzW,EAAOuW,GAIXzS,EAAUjB,EAAckB,QAExBmD,SACQ6O,GACJ1Q,EACA7C,EAAIsC,EAAa9E,GACjBkT,EACAb,EAAY1C,4BAEd3P,GAEF8D,QAAgB4S,GAAa,GAG3BrR,EAAME,GAAG6Q,MACXrB,EAAQ1P,EAAME,GAAG6Q,MAGnB5C,GAAwB,EAAOxT,EAAM8D,EAASoD,EAAOH,GElgB5C,IAACyB,GFsgBRmO,EAA4B,CAChC3W,EACAyG,EACAmQ,KAEA,MAAMvR,EAAQ7C,EAAI8C,EAAStF,GAE3B,GAAIqF,EAAO,CACT,MAAM+O,EAAa5R,EAAIsC,EAAa9E,GAC9Ba,EAAeO,EAAYgT,GAC7B5R,EAAIuC,EAAgB/E,GACpBoU,EAGFhT,EAAYP,IACX4F,GAAQA,EAAyBoQ,gBAClCD,EAEAnP,EACE3C,EACA9E,EACA4W,EAAoB/V,EAAemN,GAAc3I,EAAME,KAGzD2O,EAAclU,EAAMa,GAIxB6R,GAAcgE,KAGVvB,EAA0B,CAACnV,EAAMR,KACrCQ,GAAQR,GAAQiI,EAAI3C,EAAa9E,EAAMR,IAE/BkL,oBAAegK,KAAe3P,IAGlC2R,EAAejH,MAAOqH,IAC1B,IAAIhT,GAAU,EAad,OAZI7B,EAAgB6B,UAClBA,EAAUuO,EAAYkD,SAClB1S,SAAqByS,KAAmBvR,cAClC4R,EAAarQ,GAAS,GAE3BwR,GAAchT,IAAYN,EAAWM,UACxCN,EAAWM,QAAUA,EACrBI,EAAUC,MAAME,KAAK,CACnBP,QAAAA,MAICA,GAGHiT,EAAY,CAChB/W,EACAN,EACA8I,IAEAlG,OAAO0U,QAAQtX,GAAO4U,QAAQ,EAAE2C,EAAU7C,MACxC,MAAM8C,EAAY,GAAGlX,KAAQiX,IACvB5R,EAAQ7C,EAAI8C,EAAS4R,IAE1BpR,EAAOC,MAAMuN,IAAItT,IACf6K,GAAYuJ,MACZ/O,GAAUA,EAAME,KAClBxF,EAAaqU,GAMVF,EACEgD,EACA9C,EACA5L,GACA,GATFuO,EACEG,EACA9C,EACA5L,KAUJ2O,EAAyC,CAC7CC,EACAvW,EACAwW,EACAC,KAEA,MAAM7M,mBACA4M,GAAa3E,EACb5N,EACA1D,EAAYP,GACZkE,EACAmK,GAASkI,GACT,CAAE/P,CAAC+P,GAAavW,GAChBA,GAGN,IAAKuW,EAEH,OADAE,IAAaxR,EAAOuN,UAAW,GACxB5I,EAGT,MAAM1J,EAAS,GAEf,IAAK,MAAMmW,KAAa5S,EAAsB8S,GAC5CE,GAAYxR,EAAOgN,MAAMxG,IAAI4K,GAC7BnW,EAAOkL,KAAKzJ,EAAIiI,EAAayM,IAG/B,OAAOrX,MAAMC,QAAQsX,GAAcrW,EAASA,EAAO,IAG/CwW,EAA4C,CAChD3I,EACA5O,EAAO,MAEP,IAAK,MAAMmB,KAAOyN,EAAe,CAC/B,MAAMlP,EAAQkP,EAAczN,GACtB+V,EAAYlX,GAAQA,EAAO,IAAM,IAAMmB,EACvCkE,EAAQ7C,EAAI8C,EAAS4R,GAEtB7R,GAAUA,EAAME,KAEhBzE,EAASpB,IAAU4C,OAAOG,KAAK/C,GAAOgD,QACtC7C,MAAMC,QAAQJ,IAAUA,EAAMgD,OAE/B6U,EAAc7X,EAAOwX,GACX7R,GACVoC,EAAI3C,EAAaoS,EAAWxX,MAgI9BqV,EAAwCtF,MAAOzP,EAAMwI,EAAU,MACnE,MAAM4O,EAAa9S,EAAsBtE,GACzC,IAAI8D,EAMJ,GAJAI,EAAUC,MAAME,KAAK,CACnBR,cAAc,IAGZwO,EAAYkD,SAAU,CACxB,MAAMiC,OA5awB/H,OAAOtP,IACvC,MAAM4D,OAAEA,SAAiBuR,IAEzB,GAAInV,EACF,IAAK,MAAMH,KAAQG,EAAO,CACxB,MAAM+G,EAAQ1E,EAAIuB,EAAQ/D,GAC1BkH,EACIO,EAAIjE,EAAWO,OAAQ/D,EAAMkH,GAC7ByF,GAAMnJ,EAAWO,OAAQ/D,QAG/BwD,EAAWO,OAASA,EAGtB,OAAOA,GA8ZsB0T,CACzBrW,EAAYpB,GAAQA,EAAOoX,GAE7BtT,EAAU9D,EACNoX,EAAWnJ,MAAOjO,IAAUwC,EAAIgV,EAAcxX,IAC9C6C,EAAc2U,QAEdxX,GACF8D,SACQ4T,QAAQC,IACZP,EAAWtO,IAAI2G,MAAOyH,IACpB,MAAM7R,EAAQ7C,EAAI8C,EAAS4R,GAC3B,aAAavB,EACXtQ,EAAME,GAAK,CAAE8B,CAAC6P,GAAY7R,GAAUA,OAI1C4I,MAAMzN,SAERkW,KAEA5S,QAAgB6R,EAAarQ,GAmBjC,OAfApB,EAAUC,MAAME,oCACV6K,GAASlP,GAAQ,CAAEA,KAAAA,GAAS,KAChC+D,OAAQP,EAAWO,OACnBD,QAAAA,EACAD,cAAc,KAGZ2E,EAAQC,cAAgB3E,GAC1BqE,EACE7C,EACCnE,GAAQqB,EAAIgB,EAAWO,OAAQ5C,GAChCnB,EAAOoX,EAAatR,EAAON,OAIxB1B,GAGH4Q,EACJ0C,IAIA,MAAM1R,iCACDX,GACC2N,EAAa5N,EAAc,IAGjC,OAAO1D,EAAYgW,GACf1R,EACAwJ,GAASkI,GACT5U,EAAIkD,EAAQ0R,GACZA,EAAWtO,IAAK9I,GAASwC,EAAIkD,EAAQ1F,KAyDrCiG,EAA8C,CAACjG,EAAMwI,EAAU,MACnE,IAAK,MAAMoP,KAAa5X,EAAOsE,EAAsBtE,GAAQ8F,EAAON,MAClEM,EAAON,MAAMqS,OAAOD,GACpB9R,EAAOC,MAAM8R,OAAOD,GAEhBpV,EAAI8C,EAASsS,KACVpP,EAAQsP,YACXnL,GAAMrH,EAASsS,GACfjL,GAAM7H,EAAa8S,KAGpBpP,EAAQuP,WAAapL,GAAMnJ,EAAWO,OAAQ6T,IAC9CpP,EAAQwP,WAAarL,GAAMnJ,EAAWG,YAAaiU,IACnDpP,EAAQyP,aAAetL,GAAMnJ,EAAWI,cAAegU,IACvDvF,EAAYzN,mBACV4D,EAAQ0P,kBACTvL,GAAM5H,EAAgB6S,IAI5B1T,EAAU4O,MAAMzO,KAAK,IAErBH,EAAUC,MAAME,oCACXb,GACEgF,EAAQwP,UAAiB,CAAEtU,QAASyR,KAAhB,MAG1B3M,EAAQ2P,aAAezB,KAGpB0B,EAAmB,CACvBpY,EACAqY,EACA7P,KAEAvD,EAASjF,EAAiCwI,GAC1C,IAAInD,EAAe7C,EAAI8C,EAAStF,GAChC,MAAMyG,EAAMrF,EAAYiX,EAAS3Y,QAC7B2Y,EAASC,kBACND,EAASC,iBAAiB,yBAAyB,IAGtDD,EAEE/H,EIz6BK,CAAC7J,GACd2H,GAAa3H,IAAQJ,EAAgBI,GJw6BT8R,CAA0B9R,GAGlDA,IAAQpB,EAAME,GAAGkB,KAChB6J,GACCtP,EAAQqE,EAAME,GAAGgD,MAAQ,IAAIzF,KAAM0K,GAAWA,IAAW/G,KAK7DpB,EAAQ,CACNE,GAAI+K,iCAEKjL,EAAME,KACTgD,KAAM,IACDvH,EAAQqE,EAAME,GAAGgD,MAAQ,IAAIhI,OAC7BkG,GAAQkF,GAAclF,IAAQiF,SAASE,SAASnF,IAEnDA,GAEFA,IAAK,CAAElH,KAAMkH,EAAIlH,KAAMS,KAAAA,oCAGpBqF,EAAME,KACTkB,IAAAA,KAIRgB,EAAInC,EAAStF,EAAMqF,KAEjBmD,IAAYA,EAAQrF,WAAawT,EAA0B3W,EAAMyG,KAG/DxB,EAA0C,CAACjF,EAAMwI,EAAU,MAC/D,MAAMnD,EAAQ7C,EAAI8C,EAAStF,GA4B3B,OA1BAyH,EAAInC,EAAStF,EAAM,CACjBuF,gDACMF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEkB,IAAK,CAAEzG,KAAAA,MAC5CA,KAAAA,EACAwF,OAAO,IACJgD,KAIFpH,EAAYoH,EAAQ9I,QACvB+H,EAAI3C,EAAa9E,EAAMwI,EAAQ9I,OAG7B2N,GAAU7E,EAAQrF,WAAakC,GACjCoC,EACE3C,EACA9E,EACAwI,EAAQrF,cACJzC,EACA8B,EAAIsC,EAAa9E,EAAMgO,GAAc3I,EAAME,MAInDO,EAAON,MAAM8G,IAAItM,IAChBqF,GAASsR,EAA0B3W,OAAMU,GAAW,GAE9CwR,GACF,CAAElS,KAAMA,gCAEPA,KAAAA,GACIoB,EAAYoH,EAAQrF,UACpB,GACA,CAAEA,SAAUqF,EAAQrF,YACxB+C,SAAU8P,EACVxP,OAAQwP,EACRvP,IAAMA,IACJ,GAAIA,EACF2R,EAAiBpY,EAAMyG,EAAK+B,OACvB,CACL,MAAMnD,EAAQ7C,EAAI8C,EAAStF,EAAM,IAC3B4F,EACJyM,EAAYzN,kBAAoB4D,EAAQ5D,iBAEtCS,EAAME,KACRF,EAAME,GAAGC,OAAQ,GAGnBI,KACIC,EAAmBC,EAAOC,MAAO/F,KAASgG,IAC5CF,EAAO+M,QAAQvG,IAAItM,QAiKjC,MAAO,CACLkD,QAAS,CACP+B,SAAAA,EACAgB,WAAAA,EACAkR,UAAAA,EACAhC,YAAAA,EACAuB,aAAAA,EACAa,cAAAA,EACAiB,cApBkB,KACpB,IAAK,MAAMxY,KAAQ8F,EAAO+M,QAAS,CACjC,MAAMxN,EAAQ7C,EAAI8C,EAAStF,GAE3BqF,IACGA,EAAME,GAAGgD,KAAOlD,EAAME,GAAGgD,KAAK0F,MAAMwK,IAAQA,GAAKpT,EAAME,GAAGkB,OAC3DR,EAAWjG,GAGf8F,EAAO+M,QAAU,IAAID,KAYnB8F,kBAhiB6C,CAC/C7P,EACA7I,EACA2Y,EACA7E,EACA8E,EAAiC,GACjCC,GAAY,EACZC,GAAkB,KAElB,IAAI/P,EACJ,MAAMgQ,EAA0BC,GAC9BJ,EACA/P,GAYF,GAVA7C,GAAc,EAEV8S,GAAmBtW,EAAI8C,EAAStF,KAClC+I,EAAS4P,EAAOnW,EAAI8C,EAAStF,GAAO8T,EAAKmF,KAAMnF,EAAKoF,MACpDL,GAAapR,EAAInC,EAAStF,EAAM+I,IAGlCA,EAAS4P,EAAOnW,EAAIsC,EAAa9E,GAAO8T,EAAKmF,KAAMnF,EAAKoF,MACxDL,GAAapR,EAAI3C,EAAa9E,EAAM+I,GAEhClJ,MAAMC,QAAQ0C,EAAIgB,EAAWO,OAAQ/D,IAAQ,CAC/C,MAAM+I,EAAS4P,EAAOnW,EAAIgB,EAAWO,OAAQ/D,GAAO8T,EAAKmF,KAAMnF,EAAKoF,MACpEL,GAAapR,EAAIjE,EAAWO,OAAQ/D,EAAM+I,GAC1CoQ,GAAgB3V,EAAWO,OAAQ/D,GAGrC,GAAIiC,EAAgB2B,eAAiBpB,EAAIgB,EAAWI,cAAe5D,GAAO,CACxE,MAAM+I,EAAS4P,EACbnW,EAAIgB,EAAWI,cAAe5D,GAC9B8T,EAAKmF,KACLnF,EAAKoF,MAEPL,GAAapR,EAAIjE,EAAWI,cAA+B5D,EAAM+I,GACjEoQ,GAAgB3V,EAAWI,cAAe5D,IAGxCiC,EAAgB0B,aAAe1B,EAAgByB,WACjD+D,EACEjE,EAAWG,YACX3D,EACAoZ,GACEC,GAAQN,EAAyBlQ,GACjCrG,EAAIuC,EAAgB/E,EAAM,IAC1BwC,EAAIgB,EAAWG,YAAa3D,EAAM,MAGtC+Y,GACEtR,EACEjE,EAAWG,YACX3D,EACAoZ,GACEC,GAAQN,EAAyBlQ,GACjCrG,EAAIuC,EAAgB/E,EAAM,IAC1BwC,EAAIgB,EAAWG,YAAa3D,EAAM,MAGxCmZ,GAAgB3V,EAAWG,YAAa3D,IAG1CkE,EAAUC,MAAME,KAAK,CACnBX,QAASyR,EAAYnV,EAAMqZ,GAAQN,EAAyBlQ,IAC5DlF,YAAaH,EAAWG,YACxBI,OAAQP,EAAWO,OACnBD,QAASN,EAAWM,WA8dpBwV,oBA1dyBtZ,GAC3BwC,EAAIkQ,EAAa5N,EAAcC,EAAgB/E,EAAM,IA0dnDkE,UAAAA,EACA0B,kBAAmByM,EAAYzN,iBAC/B3C,gBAAAA,EACAqD,cACE,OAAOA,GAETA,YAAY5F,GACV4F,EAAU5F,GAEZoF,kBACE,OAAOA,GAETA,gBAAgBpF,GACdoF,EAAcpF,GAEhBgT,iBACE,OAAOA,GAETA,eAAehT,GACbgT,EAAahT,GAEfqF,qBACE,OAAOA,GAETA,mBAAmBrF,GACjBqF,EAAiBrF,GAEnBoG,aACE,OAAOA,GAETA,WAAWpG,GACToG,EAASpG,GAEXsG,kBACE,OAAOA,GAETA,gBAAgBtG,GACdsG,EAActG,GAEhB8D,iBACE,OAAOA,GAETA,eAAe9D,GACb8D,EAAa9D,GAEf6Z,aAAe/Q,IACb6J,iCAAmBN,IAAmBvJ,KAG1CuM,QAAAA,EACA9P,SAAAA,EACAuU,aAxNA,CAACC,EAASC,IAAcjK,MAAOkK,IACzBA,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEjB,IAAIC,GAAoB,EACpBrP,mBAAwB3F,GAE5BZ,EAAUC,MAAME,KAAK,CACnBmO,cAAc,IAGhB,IACE,GAAIH,EAAYkD,SAAU,CACxB,MAAMxR,OAAEA,EAAM2B,OAAEA,SAAiB4P,IACjC9R,EAAWO,OAASA,EACpB0G,EAAc/E,aAERiQ,EAAarQ,GAInBzC,EAAcW,EAAWO,SACzBzB,OAAOG,KAAKe,EAAWO,QAAQkK,MAAOjO,GAASwC,EAAIiI,EAAazK,KAEhEkE,EAAUC,MAAME,KAAK,CACnBN,OAAQ,GACRyO,cAAc,UAEViH,EAAQhP,EAAakP,KAE3BD,SAAoBA,EAAUlW,EAAWO,OAAQ4V,GACjDtH,EAAYJ,kBACV9J,EACE7C,EACCnE,GAAQqB,EAAIgB,EAAWO,OAAQ5C,GAChC2E,EAAON,QAGb,MAAOuU,GAEP,MADAD,GAAoB,EACdC,UAENvW,EAAW8O,aAAc,EACzBpO,EAAUC,MAAME,KAAK,CACnBiO,aAAa,EACbE,cAAc,EACdC,mBACE5P,EAAcW,EAAWO,SAAW+V,EACtCvH,YAAa/O,EAAW+O,YAAc,EACtCxO,OAAQP,EAAWO,WAuKzB+O,MA1XwC,CACxCoE,EAIArW,IAEA+Q,GAAWsF,GACPhT,EAAU4O,MAAM1O,UAAU,CACxBC,KAAO2V,GACL9C,EACEC,OACEzW,EACAG,GAEFmZ,KAGN7C,EACED,EACArW,GACA,GACA,GAqWNoZ,SA7gB8C,CAC9Cja,EACAN,EACA8I,EAAU,MAEV,MAAMnD,EAAQ7C,EAAI8C,EAAStF,GACrBka,EAAepU,EAAOC,MAAMuN,IAAItT,GAEtCyH,EAAI3C,EAAa9E,EAAMN,GAEnBwa,GACFhW,EAAU6B,MAAM1B,KAAK,CACnBrE,KAAAA,EACA0F,OAAQZ,KAIP7C,EAAgByB,SAAWzB,EAAgB0B,cAC5C6E,EAAQmM,cAERlN,EACEjE,EAAWG,YACX3D,EACAoZ,GACE1Z,EACA8C,EAAIuC,EAAgB/E,EAAM,IAC1BwC,EAAIgB,EAAWG,YAAa3D,EAAM,MAItCkE,EAAUC,MAAME,KAAK,CACnBrE,KAAAA,EACA2D,YAAaH,EAAWG,YACxBD,QAASyR,EAAYnV,EAAMN,QAI/B2F,GAAUA,EAAME,IAAO3F,EAAkBF,GAErCwU,EAAclU,EAAMN,EAAO8I,GAAS,GADpCuO,EAAU/W,EAAMN,EAAO8I,GAI7B4K,EAAepT,IAASkE,EAAUC,MAAME,KAAK,IAC7CH,EAAU4O,MAAMzO,KAAK,CACnBrE,KAAAA,KAkeF0U,UAAAA,EACAyF,MArKwC,CACxCC,EACAC,EAAmB,MAEnB,MAAMC,EAAgBF,GAAcrV,EAC9BW,WKpkCc6U,EAA+B/a,GACrD,IAAIiC,EACJ,MAAM3B,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClBgC,EAAO,IAAIhC,KAAKD,EAAKgb,eAChB,CAAA,IAAI1a,IAAWgB,EAAStB,GAM7B,OAAOA,EALPiC,EAAO3B,EAAU,GAAK,GACtB,IAAK,MAAMqB,KAAO3B,EAChBiC,EAAKN,GAAOoZ,EAAY/a,EAAK2B,IAMjC,OAAOM,ELqjCU8Y,CAAYD,GAM3B,GAJKD,EAAiBI,aACpB3V,EAAc9B,EAAM4B,iBAAmB,GAAKc,GAG1C2O,KAAUgG,EAAiBI,WAC7B,IAAK,MAAMza,KAAQ8F,EAAON,MAAO,CAC/B,MAAMH,EAAQ7C,EAAI8C,EAAStF,GAC3B,GAAIqF,GAASA,EAAME,GAAI,CACrB,MAAM4K,EAAWtQ,MAAMC,QAAQuF,EAAME,GAAGgD,MACpClD,EAAME,GAAGgD,KAAK,GACdlD,EAAME,GAAGkB,IAEb,IACEkF,GAAcwE,IAAaA,EAASuK,QAAQ,QAASP,QACrD,MACA,YAKHE,EAAiBM,oBACpB5V,mBAAsBuV,IAGnBD,EAAiBI,aACpBnV,EAAU,GAEVpB,EAAUhB,QAAQmB,KAAK,CACrBqB,OAAQ2U,EAAiBM,kBACrB5V,mBACKuV,KAGXpW,EAAU4O,MAAMzO,KAAK,IAErBH,EAAU6B,MAAM1B,KAAK,CACnBqB,OAAAA,KAIJI,EAAS,CACPN,MAAO,IAAIoN,IACXC,QAAS,IAAID,IACb7M,MAAO,IAAI6M,IACXE,MAAO,IAAIF,IACXS,UAAU,EACV1M,MAAO,IAGTzC,EAAUC,MAAME,KAAK,CACnBkO,YAAa8H,EAAiBO,gBAC1BpX,EAAW+O,YACX,EACJ7O,QAAS2W,EAAiBrC,UACtBxU,EAAWE,UACX2W,EAAiBM,mBACjBjQ,GAAU0P,EAAYrV,GAE1BuN,cAAa+H,EAAiBQ,iBAC1BrX,EAAW8O,YAEf3O,YAAa0W,EAAiBrC,UAC1BxU,EAAWG,YACV,GACLC,cAAeyW,EAAiBpC,YAC5BzU,EAAWI,cACV,GACLG,OAAQsW,EAAiBS,WACrBtX,EAAWO,OACV,GACLyO,cAAc,EACdC,oBAAoB,IAGtBC,GAAczQ,EAAgB6B,WAAauW,EAAiBlC,aAqF5D4C,YA3ZqD/a,IACrDA,EACIsE,EAAsBtE,GAAMsU,QAASsD,GACnCjL,GAAMnJ,EAAWO,OAAQ6T,IAE1BpU,EAAWO,OAAS,GAEzBG,EAAUC,MAAME,KAAK,CACnBN,OAAQP,EAAWO,UAoZrBkC,WAAAA,EACA+U,SAjZ8C,CAAChb,EAAMkH,EAAOsB,KAC5D,MAAM/B,GAAQjE,EAAI8C,EAAStF,EAAM,CAAEuF,GAAI,KAAgBA,IAAM,IAAIkB,IAEjEgB,EAAIjE,EAAWO,OAAQ/D,iCAClBkH,IACHT,IAAAA,KAGFvC,EAAUC,MAAME,KAAK,CACnBrE,KAAAA,EACA+D,OAAQP,EAAWO,OACnBD,SAAS,IAGX0E,GAAWA,EAAQC,aAAehC,GAAOA,EAAIE,OAASF,EAAIE,SAoY1DsU,SArF+Cjb,GAC/CwC,EAAI8C,EAAStF,GAAMuF,GAAGkB,IAAIE,sBM/oC5B3D,GACGA,EAAMkY,OAAOvW,EAAmC3B,mB3DUnDA,GAEArB,gBAACD,EAAYyZ,UACXzb,MAAOkD,EAAKI,EAAO,aAElBA,EAAMoY,6E4DWTpY,IAEA,MAAMC,EAAUnB,KACVoB,QACJA,EAAUD,EAAQC,QAAOlD,KACzBA,EAAI6I,QACJA,EAAU,KAAgBjE,iBAC1BA,GACE5B,GACGoF,EAAQiT,GAAa1Z,EAAM4B,SAEhC+X,EAAOpY,EAAQoW,oBAAoBtZ,GAAO6I,IACtCD,EAAYjH,EAAM0B,OAAO+E,GAE/BQ,EAAUvI,QAAU+H,EACpBlF,EAAQ4C,OAAOC,MAAMuG,IAAItM,GAmPzB,OAhDA2B,EAAMqC,UAAU,KAGd,GAFAd,EAAQ8C,aAAc,EAElB9C,EAAQ4C,OAAOuN,SACjBnQ,EAAQgB,UAAUC,MAAME,KAAK,SAE7B,IAAK,MAAMkX,KAAcrY,EAAQ4C,OAAOgN,MACtC,GAAI9S,EAAKwb,WAAWD,GAAa,CAC/BrY,EAAQgB,UAAUC,MAAME,KAAK,IAC7B,MAKNnB,EAAQgB,UAAU4O,MAAMzO,KAAK,CAC3BrE,KAAAA,EACA0F,OAAQxC,EAAQ4B,cAGlB5B,EAAQ4C,OAAOa,OACbwB,EAAajF,EAAQoC,QAAUnE,GAC7BA,EAAIqa,WAAWtY,EAAQ4C,OAAOa,QAGlCzD,EAAQ4C,OAAOa,MAAQ,GAEvBzD,EAAQjB,gBAAgB6B,SAAWZ,EAAQwT,gBAC1C,CAACtO,EAAQpI,EAAMkD,EAAS2F,IAE3BlH,EAAMqC,UAAU,KACd,MAAMyX,EAAyBvY,EAAQgB,UAAU6B,MAAM3B,UAAU,CAC/DiD,MAAK3B,OAAEA,EAAQ1F,KAAM0b,IACfA,IAAmB1b,GAAS0b,GAC9BL,EAAUC,EAAO9Y,EAAIkD,EAAQ1F,GAAO6I,OAO1C,OAFCrG,EAAIU,EAAQ4B,YAAa9E,IAASyH,EAAIvE,EAAQ4B,YAAa9E,EAAM,IAE3D,KACLyb,EAAuBhX,eACnBvB,EAAQ0C,mBAAqBhB,IAC/B1B,EAAQ+C,WAAWjG,KAGtB,CAACA,EAAMkD,EAAS2F,EAASjE,IAErB,CACL+W,KAAMha,EAAMyD,YA/ID,CAACmF,EAAgBC,KAC5B,MAAMoO,EAAiCgD,EACrC1Y,EAAQoW,oBAAoBtZ,GAC5B4I,EACAC,GAEFgT,EAAYjD,EAAgCrO,EAAQC,GACpD6Q,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACA6b,EACA,CACE5C,KAAM1O,EACN2O,KAAM1O,GAERoO,GACA,IA8H4B,CAAC5Y,EAAMkD,EAAS2F,IAC9CiT,KAAMna,EAAMyD,YA3HD,CAACwE,EAAcC,KAC1B,MAAM+O,EAAiCgD,EACrC1Y,EAAQoW,oBAAoBtZ,GAC5B4I,EACAC,GAEFkT,EAAYnD,EAAgChP,EAAMC,GAClDwR,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACA+b,EACA,CACE9C,KAAMrP,EACNsP,KAAMrP,GAER+O,GACA,IA0G4B,CAAC5Y,EAAMkD,EAAS2F,IAC9CkB,QAASpI,EAAMyD,YAvND,CACd1F,EAGA8I,KAEA,MAAMoQ,EAAiCoD,EACrCJ,EAAc1Y,EAAQoW,oBAAoBtZ,GAAO4I,EAAWC,GAC5DyS,EAAOhX,EAAsB5E,GAAQmJ,IAEvCwS,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACAgc,EACA,CACE/C,KAAMgD,EAAevc,IAEvBkZ,GAGF1V,EAAQ4C,OAAOa,MAAQuV,EAAkBlc,EAAM,EAAGwI,IAkMd,CAACxI,EAAMkD,EAAS2F,IACpDY,OAAQ9H,EAAMyD,YArPD,CACb1F,EAGA8I,KAEA,MAAM2T,EAAc7X,EAAsB5E,GACpCkZ,EAAiCwD,EACrCR,EAAc1Y,EAAQoW,oBAAoBtZ,GAAO4I,EAAWC,GAC5DyS,EAAOhX,EAAsB5E,GAAQmJ,IAEvCwS,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACAoc,EACA,CACEnD,KAAMgD,EAAevc,IAEvBkZ,GAGF1V,EAAQ4C,OAAOa,MAAQuV,EACrBlc,EACA4Y,EAA+BlW,OAASyZ,EAAYzZ,OACpD8F,IA4NgC,CAACxI,EAAMkD,EAAS2F,IAClDwT,OAAQ1a,EAAMyD,YAjMAuC,IACd,MAAMiR,EAEA0D,EACJV,EAAc1Y,EAAQoW,oBAAoBtZ,GAAO4I,EAAWC,GAC5DlB,GAEF0T,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACAsc,EACA,CACErD,KAAMtR,GAERiR,IAkLgC,CAAC5Y,EAAMkD,EAAS2F,IAClDa,OAAQ/H,EAAMyD,YA/KD,CACbuC,EACAjI,EAGA8I,KAEA,MAAMoQ,EAAiC2D,EACrCX,EAAc1Y,EAAQoW,oBAAoBtZ,GAAO4I,EAAWC,GAC5DlB,EACA2T,EAAOhX,EAAsB5E,GAAQmJ,IAEvCwS,EAAUzC,GACV1V,EAAQwV,kBACN7P,EACA7I,EACAuc,EACA,CACEtD,KAAMtR,EACNuR,KAAM+C,EAAevc,IAEvBkZ,GAGF1V,EAAQ4C,OAAOa,MAAQuV,EAAkBlc,EAAM2H,EAAOa,IAuJpB,CAACxI,EAAMkD,EAAS2F,IAClD2T,OAAQ7a,EAAMyD,YA3GD,CACbuC,EACAjI,KAEA,MAAMkZ,EAAiCgD,EACrC1Y,EAAQoW,oBAAoBtZ,GAC5B4I,EACAC,GAEIkQ,EAA0B0D,EAC9B7D,EACAjR,EACAjI,GAEFkJ,EAAUvI,QAAUib,EAAOvC,EAAyBlQ,GACpDwS,EAAUzS,EAAUvI,SACpB6C,EAAQwV,kBACN7P,EACA7I,EACAyc,EACA,CACExD,KAAMtR,EACNuR,KAAMxZ,GAERkZ,GACA,GACA,IAiFgC,CAAC5Y,EAAMkD,EAAS2F,IAClDrB,QAAS7F,EAAMyD,YA7Ef1F,IAIA,MAAMgG,EAAS4V,EAAOhX,EAAsB5E,GAAQmJ,GACpDwS,EACE3V,GAIFxC,EAAQwV,kBACN7P,EACA7I,EACA,IAAM0F,EACN,GACAA,GACA,GACA,IA4DkC,CAAC1F,EAAMkD,EAAS2F,IACpDT,OAAQA,uBC3RVpF,EAA8C,IAE9C,MAAM0Z,EAAe/a,EAAM0B,UAGpBrB,EAAWsB,GAAmB3B,EAAM4B,SAAkC,CAC3EG,SAAS,EACTG,cAAc,EACdF,YAAa,GACb2O,aAAa,EACbC,YAAa,EACb3O,cAAe,GACf4O,cAAc,EACdC,oBAAoB,EACpB3O,SAAS,EACTC,OAAQ,KAGN2Y,EAAarc,QACfqc,EAAarc,QAAQ6C,QAAQqW,aAAavW,GAE1C0Z,EAAarc,uCACR8R,GAAkBnP,KACrBhB,UAAAA,IAIJ,MAAMkB,EAAUwZ,EAAarc,QAAQ6C,QAmCrC,OAjCAvB,EAAMqC,UAAU,KACd,MAAMC,EAAwBf,EAAQgB,UAAUC,MAAMC,UAAU,CAC9DiD,KAAKrF,GACCwC,EAAsBxC,EAAWkB,EAAQjB,iBAAiB,KAC5DiB,EAAQM,0CACHN,EAAQM,YACRxB,GAGLsB,mBAAqBJ,EAAQM,iBAKnC,MAAO,KACLS,EAAsBQ,gBAEvB,CAACvB,IAEJvB,EAAMqC,UAAU,KACTd,EAAQwP,aACXxP,EAAQwP,YAAa,EACrBxP,EAAQjB,gBAAgB6B,SAAWZ,EAAQwT,gBAC1C1T,EAAM4B,kBAAoB1B,EAAQqU,cAAcrU,EAAQ6B,iBAE3D7B,EAAQsV,kBAGVkE,EAAarc,QAAQ2B,UAAY0C,EAC/B1C,EACAkB,EAAQjB,iBAGHya,EAAarc,iECrCiB2C,GACrC,MAAMC,EAAUnB,KACVoB,QACJA,EAAUD,EAAQC,QAAOlD,KACzBA,EAAIa,aACJA,EAAYsC,SACZA,GACEH,GAAS,GACP2Z,EAAQhb,EAAM0B,OAAOrD,GAC3B2c,EAAMtc,QAAUL,EAEhB,MAAON,EAAOkd,GAAejb,EAAM4B,SACjCnC,EAAYP,GACRqC,EAAQiU,UAAUnX,GAClBa,GA0CN,OAvCAc,EAAMqC,UAAU,KACd,MAAM6Y,EAAoB3Z,EAAQgB,UAAU4O,MAAM1O,UAAU,CAC1DC,KAAM,EAAGrE,KAAAA,MACP,IACG2c,EAAMtc,UACNL,GACDsE,EAAsBqY,EAAMtc,SAASD,KAClC8W,GACClX,GACAkX,IACCA,EAAUsE,WAAWxb,IACpBA,EAAKwb,WAAWtE,KAEtB,CACA,MAAMnW,EAASmC,EAAQiU,UACrBwF,EAAMtc,QACNQ,GACA,GAEF+b,EACE9b,EAASC,oBACAA,GACLlB,MAAMC,QAAQiB,GACd,IAAIA,GACJA,OAQZ,OAFAoC,GAAY0Z,EAAkBpY,cAEvB,IAAMoY,EAAkBpY,eAC9B,CAACtB,EAAUD,EAASrC,IAEvBc,EAAMqC,UAAU,KACdd,EAAQsV,kBAGH9Y"}